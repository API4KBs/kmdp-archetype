package {{invokerPackage}};

{{#imports}}
import {{import}};
{{/imports}}

import com.microsoft.azure.functions.ExecutionContext;
import com.microsoft.azure.functions.HttpMethod;
import com.microsoft.azure.functions.HttpRequestMessage;
import com.microsoft.azure.functions.HttpResponseMessage;
import com.microsoft.azure.functions.HttpStatus;
import com.microsoft.azure.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.functions.annotation.FunctionName;
import com.microsoft.azure.functions.annotation.HttpTrigger;

import edu.mayo.kmdp.util.ws.FunctionAppHelper;

{{^fullJavaUtil}}
import java.util.List;
import java.util.Optional;
import java.util.UUID;
{{/fullJavaUtil}}

{{#operations}}
  {{#operation}}
    {{#operationFilter}}
import {{apiPackage}}.server.{{classname}}Internal._{{operationId}};
    {{/operationFilter}}
  {{/operation}}
{{/operations}}



public class {{classname}}Function {

{{#operations}}
{{#operation}}
{{#operationFilter}}

  @FunctionName("{{operationId}}")
  public HttpResponseMessage {{operationId}}(
      @HttpTrigger(
          name = "httpTrigger",
          route = "{{{path}}}",
          methods = { HttpMethod.{{httpMethod}} },
          authLevel = AuthorizationLevel.ANONYMOUS)
          HttpRequestMessage<Optional<String>> request,
      ExecutionContext context) {

    org.omg.spec.api4kp._20200801.Answer<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> answer;

    try {
    {{#allParams}}
      {{{dataType}}} {{paramName}} =
          FunctionAppHelper.{{#isQueryParam}}fromQuery{{/isQueryParam}}{{#isBodyParam}}fromBody{{/isBodyParam}}{{#isHeaderParam}}fromHeader{{/isHeaderParam}}{{#isPathParam}}fromPath{{/isPathParam}}(
              "{{paramName}}",
              "{{{path}}}",
              {{{dataType}}}.class, // dataType
              {{{required}}}, // required
              {{#defaultValue}}"{{{defaultValue}}}"{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}, // default
              {{#isQueryParam}}request.getQueryParameters(){{/isQueryParam}}{{#isBodyParam}}request.getBody().orElse(null){{/isBodyParam}}{{#isHeaderParam}}request.getHeaders(){{/isHeaderParam}}{{#isPathParam}}request.getUri().getPath(){{/isPathParam}},
              context.getInvocationId());
    {{/allParams}}

      ProviderFactory.ServiceProvider provider = ProviderFactory.newProvider();
      _{{operationId}} delegate = provider.get_{{operationId}}();
      answer = delegate.{{operationId}}(
        {{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

    } catch (Exception e) {
      FunctionAppHelper.logException(context, e);
      answer = org.omg.spec.api4kp._20200801.Answer.failed(e);
    }

    return FunctionAppHelper.toResponse(request, answer);
  }

{{/operationFilter}}
{{/operation}}
{{/operations}}

}