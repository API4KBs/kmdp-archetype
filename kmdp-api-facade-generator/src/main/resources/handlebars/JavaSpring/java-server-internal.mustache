package {{package}};

import {{modelPackage}}.*;
{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
  import java.util.List;
  import java.util.Map;
  import java.util.Optional;
  import java.util.UUID;
{{/fullJavaUtil}}

{{#operations}}
public interface {{classname}}Internal {

  public interface {{classname}}Operation {
    // marker interface for Operations
  }


{{#operation}}

  @java.lang.FunctionalInterface
  public interface _{{operationId}} extends {{classname}}Operation {
    org.omg.spec.api4kp._20200801.Answer<{{>returnTypes}}> {{operationId}}(
      {{{adaptedParams withType=true}}}
    );
  }

  default org.omg.spec.api4kp._20200801.Answer<{{>returnTypes}}> {{operationId}}(
      {{{adaptedParams withType=true}}}
    ) {
    return org.omg.spec.api4kp._20200801.Answer.unsupported();
  }

  {{#hasOptionalParams}}
  default org.omg.spec.api4kp._20200801.Answer<{{>returnTypes}}> {{operationId}}(
      {{{adaptedParams withType=true required=true debug=true}}}
    ) {
    return {{operationId}}(
      {{{adaptedParams withType=false required=true debug=true}}}
    );
  }
  {{/hasOptionalParams}}

{{/operation}}

  public interface Operator {
    {{#operation}}

    default boolean can_{{operationId}}() {
      return this instanceof _{{operationId}};
    }

    default Optional<_{{operationId}}> as_{{operationId}}() {
      return can_{{operationId}}()
        ? Optional.of((_{{operationId}}) this)
        : Optional.empty();
    }

    default org.omg.spec.api4kp._20200801.Answer<{{>returnTypes}}> try_{{operationId}}(
        {{{adaptedParams withType=true}}}
      ) {
        return can_{{operationId}}()
          ? org.omg.spec.api4kp._20200801.Answer.of(as_{{operationId}}())
                  .flatMap(x -> x.{{operationId}}(
            {{{adaptedParams withType=false}}}
          ))
          : org.omg.spec.api4kp._20200801.Answer.unsupported();
    }

    {{/operation}}

  }

}
{{/operations}}