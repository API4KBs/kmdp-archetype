package {{invokerPackage}};

{{#imports}}
import {{import}};
{{/imports}}

import com.microsoft.azure.functions.ExecutionContext;
import com.microsoft.azure.functions.HttpMethod;
import com.microsoft.azure.functions.HttpRequestMessage;
import com.microsoft.azure.functions.HttpResponseMessage;
import com.microsoft.azure.functions.HttpStatus;
import com.microsoft.azure.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.functions.annotation.FunctionName;
import com.microsoft.azure.functions.annotation.HttpTrigger;

import edu.mayo.kmdp.function.monitor.MonitorableFunctionApp;
import edu.mayo.kmdp.function.util.FunctionAppHelper;
import edu.mayo.kmdp.function.common.handlers.MessageHandler;

{{^fullJavaUtil}}
import java.util.List;
import java.util.Optional;
import java.util.ServiceLoader;
import java.util.UUID;
{{/fullJavaUtil}}

{{#operations}}
  {{#operation}}
    {{#operationFilter}}
import {{apiPackage}}.{{classname}}Internal._{{operationId}};
    {{/operationFilter}}
  {{/operation}}
{{/operations}}



public class {{classname}}Function {

  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger({{classname}}Function.class);


{{#operations}}
{{#operation}}
{{#operationFilter}}


  MonitorableFunctionApp monitorable;

  MessageHandler handler;

  _{{operationId}} delegate;

  public {{classname}}Function() {
    try {
      var loader =
          ServiceLoader
              .load(_{{operationId}}.class);
      delegate = loader.findFirst().orElseThrow(() ->
          new RuntimeException("No provider for API " + _{{operationId}}.class.getName()));

      monitorable = delegate instanceof MonitorableFunctionApp
          ? (MonitorableFunctionApp) delegate
          : MonitorableFunctionApp.unMonitorable();

      var parser =
          ServiceLoader
              .load(MessageHandler.class);
      handler = parser.findFirst().orElse(new MessageHandler() {
      });
    } catch (Throwable t) {
      logger.error(t.getMessage(), t);
      monitorable = MonitorableFunctionApp.unMonitorable();
      handler = new MessageHandler() {};
      delegate = ({{#invocationContextAware}}ctx, {{/invocationContextAware}}{{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> {
        throw new UnsupportedOperationException("Unable to find service provider", t);
      };
    }
  }

  public {{classname}}Function(_{{operationId}} delegate) {
    this(delegate, new MessageHandler() {});
  }

  public {{classname}}Function(_{{operationId}} delegate, MessageHandler handler) {
    this.delegate = delegate;
    this.handler = handler;
  }

  public _{{operationId}} getDelegate() {
    return delegate;
  }

  @FunctionName("{{operationId}}")
  public HttpResponseMessage {{operationId}}(
      @HttpTrigger(
          name = "httpTrigger",
          methods = { HttpMethod.{{httpMethod}} },
          route = "{{#normalizePath}}{{{path}}}{{/normalizePath}}",
          authLevel = AuthorizationLevel.ANONYMOUS)
          HttpRequestMessage<Optional<String>> request,
      ExecutionContext functionExecContext) {

    try {
    {{#allParams}}
      {{{dataType}}} {{paramName}} =
          FunctionAppHelper.{{#isQueryParam}}fromQuery{{/isQueryParam}}{{#isBodyParam}}fromBody{{/isBodyParam}}{{#isHeaderParam}}fromHeader{{/isHeaderParam}}{{#isPathParam}}fromPath{{/isPathParam}}(
              "{{paramName}}",
              "{{{path}}}",
              {{{dataType}}}.class, // dataType
              {{{required}}}, // required
              {{#defaultValue}}"{{{defaultValue}}}"{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}, // default
              {{#isQueryParam}}request.getQueryParameters(){{/isQueryParam}}{{#isBodyParam}}request.getBody().orElse(null){{/isBodyParam}}{{#isHeaderParam}}request.getHeaders(){{/isHeaderParam}}{{#isPathParam}}request.getUri().getPath(){{/isPathParam}},
              functionExecContext.getInvocationId(){{#isBodyParam}},{{/isBodyParam}}
              {{#isBodyParam}}(json, arg) -> ({{{dataType}}}) handler.parse(json, {{{dataType}}}.class).orElse(null){{/isBodyParam}}
        );
    {{/allParams}}

    var answer = delegate.{{operationId}}(
        {{#invocationContextAware}}functionExecContext.getInvocationId(),{{/invocationContextAware}}
        {{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        .flatMap(x -> handler.serialize(x));
      return FunctionAppHelper.toResponse(request, answer);
    } catch (Throwable e) {
      FunctionAppHelper.logException(functionExecContext, e);
      var answer = org.omg.spec.api4kp._20200801.Answer.failed(e);
      return FunctionAppHelper.toResponse(request, answer);
    }

  }



  /**
   * Version monitoring endpoint
   *
   * @param request         the client request
   * @param functionContext the execution context
   * @return the /version data, as a response
   */
  @FunctionName("version")
  public HttpResponseMessage version(
      @HttpTrigger(name = "httpTrigger", methods = {HttpMethod.GET},
          authLevel = AuthorizationLevel.ANONYMOUS)
      HttpRequestMessage<Optional<String>> request,
      ExecutionContext functionContext) {
    try {
      return FunctionAppHelper.toResponse(request, monitorable.getVersion());
    } catch (Throwable e) {
      return FunctionAppHelper.toResponse(request, org.omg.spec.api4kp._20200801.Answer.failed(e));
    }
  }

  /**
   * State monitoring endpoint
   *
   * @param request         the client request
   * @param functionContext the execution context
   * @return the /state data, as a response
   */
  @FunctionName("state")
  public HttpResponseMessage state(
      @HttpTrigger(name = "httpTrigger", methods = {HttpMethod.GET},
          authLevel = AuthorizationLevel.ANONYMOUS)
      HttpRequestMessage<Optional<String>> request,
      ExecutionContext functionContext) {
    try {
      return FunctionAppHelper.toResponse(request, monitorable.getState());
    } catch (Throwable e) {
      return FunctionAppHelper.toResponse(request, org.omg.spec.api4kp._20200801.Answer.failed(e));
    }
  }

  /**
   * Health monitoring endpoint
   *
   * @param request the client request
   * @param context the execution context
   * @return the /health data, as a response
   */
  @FunctionName("health")
  public HttpResponseMessage health(
      @HttpTrigger(name = "httpTrigger", methods = {HttpMethod.GET},
          authLevel = AuthorizationLevel.ANONYMOUS)
      HttpRequestMessage<Optional<String>> request,
      ExecutionContext functionContext) {
    try {
      return FunctionAppHelper.toResponse(request, monitorable.getHealth());
    } catch (Throwable e) {
      return FunctionAppHelper.toResponse(request, org.omg.spec.api4kp._20200801.Answer.failed(e));
    }
  }



{{/operationFilter}}
{{/operation}}
{{/operations}}

}