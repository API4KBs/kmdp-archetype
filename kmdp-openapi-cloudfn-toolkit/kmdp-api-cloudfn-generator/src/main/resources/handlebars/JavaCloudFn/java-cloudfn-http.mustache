package {{invokerPackage}};

{{#imports}}
import {{import}};
{{/imports}}

import com.google.cloud.functions.HttpFunction;
import com.google.cloud.functions.HttpRequest;
import com.google.cloud.functions.HttpResponse;
import edu.mayo.kmdp.function.util.FunctionContext;
import edu.mayo.kmdp.function.util.CloudFunctionHelper;
import edu.mayo.kmdp.health.monitor.MonitorableFunctionApp;
import java.io.IOException;
import edu.mayo.kmdp.function.common.handlers.MessageHandler;


{{^fullJavaUtil}}
import java.util.List;
import java.util.Optional;
import java.util.ServiceLoader;
import java.util.UUID;
{{/fullJavaUtil}}

{{#operations}}
  {{#operation}}
    {{#operationFilter}}
import {{apiPackage}}.{{classname}}Internal._{{operationId}};
    {{/operationFilter}}
  {{/operation}}
{{/operations}}



public class {{classname}}Function implements HttpFunction {

  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger({{classname}}Function.class);


{{#operations}}
{{#operation}}
{{#operationFilter}}


  MonitorableFunctionApp monitorable;

  MessageHandler handler;

  _{{operationId}} delegate;

  public {{classname}}Function() {
    try {
      var loader =
          ServiceLoader
              .load(_{{operationId}}.class, {{classname}}Function.class.getClassLoader());
      delegate = loader.findFirst().orElseThrow(() ->
          new RuntimeException("No provider for API " + _{{operationId}}.class.getName()));

      monitorable = delegate instanceof MonitorableFunctionApp
          ? (MonitorableFunctionApp) delegate
          : MonitorableFunctionApp.unMonitorable();

      var parser =
          ServiceLoader
              .load(MessageHandler.class, {{classname}}Function.class.getClassLoader());
      handler = parser.findFirst().orElse(new MessageHandler() {
      });
    } catch (Throwable t) {
      logger.error(t.getMessage(), t);
      monitorable = MonitorableFunctionApp.unMonitorable();
      handler = new MessageHandler() {};
      delegate = ({{#invocationContextAware}}ctx, {{/invocationContextAware}}{{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> {
        throw new UnsupportedOperationException("Unable to find service provider", t);
      };
    }
  }

  public {{classname}}Function(_{{operationId}} delegate) {
    this(delegate, new MessageHandler() {});
  }

  public {{classname}}Function(_{{operationId}} delegate, MessageHandler handler) {
    this.delegate = delegate;
    this.handler = handler;
  }

  public _{{operationId}} getDelegate() {
    return delegate;
  }

  public void service(
      HttpRequest request,
      HttpResponse response)
      throws IOException {

    var functionExecContext =
      new FunctionContext("{{className}}::{{operationId}}", UUID.randomUUID().toString(), logger);

    if ("{{httpMethod}}".equals(request.getMethod())
      && "{{{path}}}".equals(request.getPath())) {
      {{operationId}}(request, response, functionExecContext);
    } else if ("GET".equals(request.getMethod())) {
      switch (request.getPath()) {
        case "/state":
          state(response, functionExecContext);
        break;
        case "/version":
          version(response, functionExecContext);
        break;
        case "/health":
          health(response, functionExecContext);
        break;
        default:
      }
    } else {
      response.setStatusCode(400);
    }

  }

  public void {{operationId}}(
    HttpRequest request,
    HttpResponse response,
    FunctionContext functionExecContext) {
    try {
    {{#allParams}}
      {{{dataType}}} {{paramName}} =
          CloudFunctionHelper.{{#isQueryParam}}fromQuery{{/isQueryParam}}{{#isBodyParam}}fromBody{{/isBodyParam}}{{#isHeaderParam}}fromHeader{{/isHeaderParam}}{{#isPathParam}}fromPath{{/isPathParam}}(
              "{{paramName}}",
              "{{{path}}}",
              {{{dataType}}}.class, // dataType
              {{{required}}}, // required
              {{#defaultValue}}"{{{defaultValue}}}"{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}, // default
              {{#isQueryParam}}request.getQueryParameters(){{/isQueryParam}}{{#isBodyParam}}request.getBody().orElse(null){{/isBodyParam}}{{#isHeaderParam}}request.getHeaders(){{/isHeaderParam}}{{#isPathParam}}request.getUri().getPath(){{/isPathParam}},
              functionExecContext.getInvocationId(){{#isBodyParam}},{{/isBodyParam}}
              {{#isBodyParam}}(json, arg) -> ({{{dataType}}}) handler.parse(json, {{{dataType}}}.class).orElse(null){{/isBodyParam}}
        ){{^isListContainer}}.get(0){{/isListContainer}};
    {{/allParams}}

    var answer = delegate.{{operationId}}(
        {{#invocationContextAware}}functionExecContext.getInvocationId(),{{/invocationContextAware}}
        {{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        .flatMap(x -> handler.serialize(x));
      CloudFunctionHelper.toResponse(functionExecContext, response, answer);
    } catch (Throwable e) {
      CloudFunctionHelper.logException(functionExecContext, e);
      var answer = org.omg.spec.api4kp._20200801.Answer.failed(e);
      CloudFunctionHelper.toResponse(functionExecContext, response, answer);
    }

  }


/**
   * Version monitoring endpoint
   *
   * @param response        the client response
   * @param context the execution context
   * @return the /version data, as a response
   */
  public void version(
      HttpResponse response,
      FunctionContext context) {
    try {
      CloudFunctionHelper.toResponse(context, response, monitorable.getVersion());
    } catch (Throwable e) {
      CloudFunctionHelper.toResponse(context, response, org.omg.spec.api4kp._20200801.Answer.failed(e));
    }
  }

  /**
   * State monitoring endpoint
   *
   * @param response        the client response
   * @param context the execution context
   * @return the /state data, as a response
   */
  public void state(
      HttpResponse response,
      FunctionContext context) {
    try {
      CloudFunctionHelper.toResponse(context, response, monitorable.getState());
    } catch (Throwable e) {
      CloudFunctionHelper.toResponse(context, response, org.omg.spec.api4kp._20200801.Answer.failed(e));
    }
  }

  /**
   * Health monitoring endpoint
   *
   * @param response the client response
   * @param context  the execution context
   * @return the /health data, as a response
   */
  public void health(
      HttpResponse response,
      FunctionContext context) {
    try {
      CloudFunctionHelper.toResponse(context, response, monitorable.getHealth());
    } catch (Throwable e) {
      CloudFunctionHelper.toResponse(context, response, org.omg.spec.api4kp._20200801.Answer.failed(e));
    }
  }



{{/operationFilter}}
{{/operation}}
{{/operations}}

}